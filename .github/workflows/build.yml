#
# Copyright 2019-2020 DJANTA, LLC (https://www.djanta.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed toMap in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

# On push event ...
on:
  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version: ['1.8']
        os: [ubuntu-latest]
    steps:
      - name: Project checking out
        uses: actions/checkout@v2
      - name: GitHub credentials configuration
#        env:
#          GH_USER: ${{ secrets.GH_USER }}
#          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash
        run: |
          git config user.name "${{ secrets.GH_USER }}"
          git config user.email "${{ secrets.GH_USER_EMAIL }}"
          git config credential.helper "store --file=.git/credentials"
          echo "https://${{ secrets.GITHUB_TOKEN }}:@github.com" > .git/credentials
      - name: Checkout submodules - (${{ matrix.os }})
        shell: bash
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --remote --merge --force --depth=3
      - name: Gpg initialization - (${{ matrix.os }})
        shell: bash
        run: |
          echo "GnuGpg initialization step ..."
          echo "TEMP = $TEMP, TMP = $TMP"
          openssl --version
          gpg --keyserver pool.sks-keyservers.net --recv-keys ${{ secrets.GPG_KEYID }}
      - name: Set up JDK ${{ matrix.version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.version }}
      - name: Maven Build (Clean & verify) on ${{ matrix.os }} with version ${{ matrix.version }}
        env:
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEYNAME: ${{ secrets.GPG_KEYNAME }}
        run: |
          mvn -X help:effective-pom
          cat $(pwd)/.mvn/settings.xml
          which gpg
          ./mvnw -B -X -s $(pwd)/.mvn/settings.xml -Prelease -Dsync.dryRun -DskipTests=false clean verify
#          ./mvnw -X -B -s $(pwd)/.mvn/settings.xml -Prelease,github,-sonatype clean verify
#          ./mvnw -X -B -s $(pwd)/.mvn/settings.xml -Prelease,sonatype clean verify